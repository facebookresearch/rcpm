defaults:
  - hydra/sweeper: nevergrad
  - hydra/launcher: submitit_slurm

seed: 0
exp: t
batch_size: 256
iterations: 1e6
eval_samples: 20000
log_frequency: 1000
disable_init_plots: True
disable_evol_plots: True

sphere:
  _target_: manifolds.Sphere
  D: 3
  jitter: 1e-2

product:
  _target_: manifolds.Product
  manifolds_str: S1,S1
  D: 4

torus:
  _target_: manifolds.Torus
  D: 4

manifold: ${sphere}
loss: kl
# loss: likelihood
base: SphereUniform
# base: SphereBaseWrappedNormal
target: RezendeSphereFourMode
# target: LouSphereSingleMode
# target: LouSphereFourModes
# target: SphereCheckerboard

# manifold: ${torus}
# loss: likelihood
# base: ProductUniformComponents
# target: RezendeTorusUnimodal

optim:
  _target_: flax.optim.Adam
  learning_rate: 1e-3
  beta1: 0.9
  beta2: 0.999

flow:
    _target_: flows.SequentialFlow
    n_transforms: 5
    single_transform_cfg:
        _target_: flows.ExpMapFlow
        # potential_cfg: ${radial_potential}
        potential_cfg: ${infaff_potential}


infaff_potential:
    _target_: flows.InfAffine
    n_components: 68
    init_alpha_mode: uniform
    init_alpha_linear_scale: 1.
    init_alpha_minval: 0.4
    init_alpha_range: 0.01
    cost_gamma: 0.1
    min_zero_gamma: null


multi_infaff_potential:
    _target_: flows.MultiInfAffine
    n__components: 200
    init_alpha_minval: 0.4
    init_alpha_range: 1
    n_layers: 3
    cost_gamma: 0.05
    min_zero_gamma: 0.05


radial_potential:
    _target_: flows.RadialPotential
    n_radial_components: 12
    init_beta_minval: 1.
    init_beta_range: 2.


hydra:
  run:
    dir: ./exp_local/${now:%Y.%m.%d}/${now:%H%M%S}
  sweep:
    dir: ./exp/${now:%Y.%m.%d}/${now:%H%M%S}_${exp}
    subdir: ${hydra.job.num}
  launcher:
    max_num_timeout: 100000
    timeout_min: 4319
    partition: priority
    comment: ICML
    mem_gb: 64
    gpus_per_node: 1
  sweeper:
    optim:
      optimizer: RandomSearch
      budget: 200
      num_workers: 200
    parametrization:
      optim.learning_rate:
        lower: 5e-6
        upper: 1e-1
        log: True
        step: 10
      optim.beta1: [0.1, 0.3, 0.5, 0.7, 0.9]
      optim.beta2: [0.1, 0.3, 0.5, 0.7, 0.9, 0.99, 0.999]
      # infaff_potential.n_components:
      #   lower: 50
      #   upper: 1000
      #   integer: True
      #   log: True
      #   step: 10
      # infaff_potential.init_alpha_minval:
      #   lower: 1e-5
      #   upper: 10.
      #   log: True
      #   step: 10
      # infaff_potential.init_alpha_range:
      #   lower: 1e-3
      #   upper: 1.
      #   log: True
      # infaff_potential.cost_gamma: [0.01, 0.05, 0.1, 0.5]
      # infaff_potential.min_zero_gamma: [null, 0.01, 0.05, 0.1, 0.5]

      multi_infaff_potential.n_components:
        lower: 50
        upper: 1000
        integer: True
        log: True
        step: 10
      multi_infaff_potential.init_alpha_minval:
        lower: 1e-5
        upper: 10.
        log: True
        step: 10
      multi_infaff_potential.init_alpha_range:
        lower: 1e-3
        upper: 1.
        log: True
        step: 10
      multi_infaff_potential.cost_gamma: [0.01, 0.05, 0.1, 0.5]
      multi_infaff_potential.min_zero_gamma: [null, 0.01, 0.05, 0.1, 0.5]
      multi_infaff_potential.n_layers:
        lower: 1
        upper: 5
        integer: True
        step: 1
